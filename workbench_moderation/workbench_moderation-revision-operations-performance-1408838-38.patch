diff --git a/workbench_moderation.module b/workbench_moderation.module
index f510e2e..3913c50 100644
--- a/workbench_moderation.module
+++ b/workbench_moderation.module
@@ -186,14 +186,15 @@ function workbench_moderation_menu_alter(&$items) {
   $items['node/%node/revisions']['page arguments'] = array(1);
 
   // Override the node revision view callback.
- $items['node/%node/revisions/%/view']['page callback'] = 'workbench_moderation_node_view_revision';
- $items['node/%node/revisions/%/view']['file path'] = drupal_get_path('module', 'workbench_moderation');
- $items['node/%node/revisions/%/view']['file'] = 'workbench_moderation.node.inc';
-
+  $items['node/%node/revisions/%/view']['page callback'] = 'workbench_moderation_node_view_revision';
+  $items['node/%node/revisions/%/view']['file path'] = drupal_get_path('module', 'workbench_moderation');
+  $items['node/%node/revisions/%/view']['file'] = 'workbench_moderation.node.inc';
 
   // For revert and delete operations, use our own access check.
   $items['node/%node/revisions/%/revert']['access callback'] = '_workbench_moderation_revision_access';
+  $items['node/%node/revisions/%/revert']['access arguments'] = array(1, 'update');
   $items['node/%node/revisions/%/delete']['access callback'] = '_workbench_moderation_revision_access';
+  $items['node/%node/revisions/%/delete']['access arguments'] = array(1, 'delete');
 
   // Provide a container administration menu item, if one doesn't already exist.
   if (!isset($items['admin/config/workbench'])) {
@@ -499,31 +500,16 @@ function _workbench_moderation_revision_access($node, $op) {
     return _node_revision_access($node, $op);
   }
 
-  // Prevent reverting to or deleting the current revision.
-  if ($node->workbench_moderation['current']->vid == $node->workbench_moderation['my_revision']->vid) {
+  // Prevent reverting to (ie, update) or deleting the current and published revisions.
+  if (($node->workbench_moderation['current']->vid == $node->workbench_moderation['my_revision']->vid
+    || (isset($node->workbench_moderation['published']) && $node->workbench_moderation['published']->vid == $node->workbench_moderation['my_revision']->vid))
+      && ($op == 'update' || $op == 'delete')) {
     return FALSE;
   }
 
-  // Temporarily give the node an impossible revision.
-  // _node_revision_access() keeps access check results in a static variable
-  // indexed by revision only, not by op. Thus, subsequent checks on the same
-  // vid for different ops yield the same result, regardless of permissions.
-  // Setting a fake vid here allows us to store different static results per op.
-  $tmp = $node->vid;
-  switch ($op) {
-    case 'update':
-      $node->vid = -1;
-      break;
-    case 'delete':
-      $node->vid = -2;
-      break;
-  }
-
   // Check access.
   $access = _node_revision_access($node, $op);
 
-  // Restore the original revision id.
-  $node->vid = $tmp;
   return $access;
 }
 
diff --git a/workbench_moderation.node.inc b/workbench_moderation.node.inc
index 5baaf59..45dec3c 100644
--- a/workbench_moderation.node.inc
+++ b/workbench_moderation.node.inc
@@ -91,11 +91,13 @@ function workbench_moderation_node_history_view($node) {
   $query = db_select('node', 'n');
   $query->leftJoin('node_revision', 'r', 'n.nid = r.nid');
   $query->leftJoin('users', 'u', 'r.uid = u.uid');
+  $query->leftJoin('workbench_moderation_node_history', 'm', 'r.vid = m.vid');
   $query->addField('n', 'vid', 'live_revision');
   $query->condition('n.nid', $node->nid)
     ->orderBy('r.vid', 'DESC')
     ->fields('r', array('nid', 'vid', 'title', 'log', 'uid', 'timestamp'))
-    ->fields('u', array('name'));
+    ->fields('u', array('name'))
+    ->fields('m');
 
   $revisions = $query->execute()
     ->fetchAllAssoc('vid');
@@ -134,18 +136,42 @@ function workbench_moderation_node_history_view($node) {
 
     // Revision operations.
     $revision_operations = array();
-    if (isset($node->workbench_moderation['published']) && $revision->vid == $node->workbench_moderation['published']->vid) {
-      $revision_operations['view'] = workbench_moderation_access_link(t('view'), "node/{$revision->nid}");
-    }
-    elseif ($revision->vid == $node->workbench_moderation['current']->vid) {
-      $revision_operations['view'] = workbench_moderation_access_link(t('view'), "node/{$revision->nid}/current-revision");
+
+    // Loading the node at the specific revision using node_load() is too slow
+    // when there are many revisions, thus we fake it by cloning the original
+    // node and changing the 'vid' and the 'my_revision' elements required for
+    // granting access to the revision operations (view, update/revert, delete).
+    $node_revision = clone $node;
+    $node_revision->vid = $revision->vid;
+    $node_revision->workbench_moderation['my_revision'] = $revision;
+
+    // View operation.
+    if (_workbench_moderation_revision_access($node_revision, 'view')) {
+      // Link to the node page if this is the published revision.
+      if (isset($node->workbench_moderation['published']) && $revision->vid == $node->workbench_moderation['published']->vid) {
+        $url = "node/{$revision->nid}";
+      }
+      // The special case "current-revision" link handles routing for the
+      // current unpublished revision.
+      elseif ($revision->vid == $node->workbench_moderation['current']->vid) {
+        $url = "node/{$revision->nid}/current-revision";
+      }
+      // Otherwise, link to the normal revision view page.
+      else {
+        $url = "node/{$revision->nid}/revisions/{$revision->vid}/view";
+      }
+      $revision_operations['view'] = l(t('View'), $url);
     }
-    else {
-      $revision_operations['view'] = workbench_moderation_access_link(t('view'), "node/{$revision->nid}/revisions/{$revision->vid}/view");
+
+    // Revert operation.
+    if (_workbench_moderation_revision_access($node_revision, 'update')) {
+      $revision_operations['revert'] = l(t('Revert'), "node/{$revision->nid}/revisions/{$revision->vid}/revert");
     }
 
-    $revision_operations['revert'] = workbench_moderation_access_link(t('revert'), "node/{$revision->nid}/revisions/{$revision->vid}/revert");
-    $revision_operations['delete'] = workbench_moderation_access_link(t('delete'), "node/{$revision->nid}/revisions/{$revision->vid}/delete");
+    // Delete operation.
+    if (_workbench_moderation_revision_access($node_revision, 'delete')) {
+      $revision_operations['delete'] = l(t('Delete'), "node/{$revision->nid}/revisions/{$revision->vid}/delete");
+    }
 
     $row['data']['revision'] = implode(' | ', array_filter($revision_operations));
 
