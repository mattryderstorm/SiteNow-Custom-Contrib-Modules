diff --git a/includes/media.filter.inc b/includes/media.filter.inc
index 2e4227c..a902679 100644
--- a/includes/media.filter.inc
+++ b/includes/media.filter.inc
@@ -263,6 +263,11 @@ function media_token_to_markup($match, $wysiwyg = FALSE) {
       throw new Exception('No file Id');
     }
 
+    // Ensure the 'link_text' key is always defined.
+    if (!isset($tag_info['link_text'])) {
+      $tag_info['link_text'] = NULL;
+    }
+
     // Ensure a valid view mode is being requested.
     if (!isset($tag_info['view_mode'])) {
       $tag_info['view_mode'] = media_variable_get('wysiwyg_default_view_mode');
@@ -338,6 +343,14 @@ function media_token_to_markup($match, $wysiwyg = FALSE) {
     return '';
   }
 
+  // If the tag has link text stored with it, override the filename with it for
+  // the rest of this function, so that if the file is themed as a link, the
+  // desired text will be used (see, for example, theme_file_link()).
+  // @todo: Try to find a less hacky way to do this.
+  if (isset($tag_info['link_text'])) {
+    $file->filename = $tag_info['link_text'];
+  }
+
   if ($wysiwyg) {
     $settings['wysiwyg'] = $wysiwyg;
     // If sending markup to a WYSIWYG, we need to pass the file infomation so
@@ -350,6 +363,7 @@ function media_token_to_markup($match, $wysiwyg = FALSE) {
       'type' => 'media',
       'fid' => $file->fid,
       'view_mode' => $tag_info['view_mode'],
+      'link_text' => $tag_info['link_text'],
     ));
     $element['#attributes']['data-file_info'] = urlencode($data);
     $element['#attributes']['class'][] = 'media-element';
diff --git a/js/wysiwyg-media.js b/js/wysiwyg-media.js
index 003ed88..479b0fe 100644
--- a/js/wysiwyg-media.js
+++ b/js/wysiwyg-media.js
@@ -120,7 +120,16 @@ Drupal.wysiwyg.plugins.media = {
     // Media requests a WYSIWYG place holder rendering of the file by passing
     // the wysiwyg => 1 flag in the settings array when calling
     // media_get_file_without_label().
-    var matches = content.match(/<img[^>]+class=[\'"]([^"']+ )?media-element[^>]*>/gi);
+    //
+    // Finds the media-element class.
+    var classRegex = 'class=[\'"][^\'"]*?media-element';
+    // Image tag with the media-element class.
+    var regex = '<img[^>]+' + classRegex + '[^>]*?>';
+    // Or a span with the media-element class (used for documents).
+    // \S\s catches any character, including a linebreak; JavaScript does not
+    // have a dotall flag.
+    regex += '|<span[^>]+' + classRegex + '[^>]*?>[\\S\\s]+?</span>';
+    var matches = content.match(RegExp(regex, 'gi'));
     if (matches) {
       for (i = 0; i < matches.length; i++) {
         markup = matches[i];
@@ -274,6 +283,14 @@ function extract_file_info (element) {
       }
     });
     delete(file_info.attributes['data-file_info']);
+
+    // Extract the link text, if there is any.
+    if (link_text = element.find('a').html()) {
+      file_info.link_text = link_text;
+    }
+    else {
+      file_info.link_text = null;
+    }
   }
 
   return file_info;
