<?php

/**
 * @file
 * Install, update and uninstall functions for UI module data types.
 */


/**
 * @file
 * Install file for Node Example module.
 *
 * The definition of the fields for the module is here,
 *
 * @see @link http://drupal.org/node/707832 Field API Tutorial @endlink
 * @see @link http://drupal.org/node/443536 Field API Handbook Page @endlink
 * @see @link field Field API documentation @endlink
 */

/**
 * Implements hook_install().
 *
 *
 * @see node_type_set_defaults()
 * @see field_info_instance()
 * @see field_update_instance()
 * @see field_create_field()
 * @see field_create_instance()
 */
function uicustom_install() {
  // use get_t() to get the name of our localization function for translation
  // during install, when t() is not available.
  $t = get_t();

  // Define the node type.
  $node_person = array(
    'type' => 'node_person',
    'name' => $t('Person node'),
    'module' => 'uicustom',
    'base' => 'node_content',
    'description' => $t('This is a faculty/staff person to be tracked in the site directory.'),
    'has_title' => true,
    'comment' => 0,
    'title_label' => $t('Name'),
  );

  // Complete the node type definition by setting any defaults not explicitly
  // declared above.
  // http://api.drupal.org/api/function/node_type_set_defaults/7
  $content_type = node_type_set_defaults($node_person);
  node_add_body_field($content_type);

  // Save the content type
  node_type_save($content_type);

  // hide comments for this node. 
  //http://api.drupal.org/api/drupal/modules--comment--comment.module/7
  variable_set('comment_node_person', 'COMMENT_NODE_HIDDEN');

  // Hide date and author information
  variable_set('node_submitted_node_person', FALSE);
  // Load the instance definition for our content type's body
  // http://api.drupal.org/api/function/field_info_instance/7
  $body_instance = field_info_instance('node', 'body', 'node_person');

  // Add our person_node_list view mode to the body instance display by
  // instructing the body to display as a summary

  $body_instance['display']['default'] = array(
    'label' => 'text',
    'type' => 'text',
    'weight' => 20,
  );

  // Save our changes to the body field instance.
  // http://api.drupal.org/api/function/field_update_instance/7
  field_update_instance($body_instance);

  // Create all the fields we are adding to our content type.
  // http://api.drupal.org/api/function/field_create_field/7
  foreach (_uicustom_installed_fields() as $field) {
    field_create_field($field);
  }

  // Create all the instances for our fields.
  // http://api.drupal.org/api/function/field_create_instance/7
  foreach (_uicustom_installed_instances() as $instance) {
    $instance['entity_type'] = 'node';
    $instance['bundle'] = $node_person['type'];
    field_create_instance($instance);
  }
  taxonomy_vocabulary_save((object) array(
    'name' => 'Ranks',
    'machine_name' => 'job_rank',
  ));
}
/**
 * Implements hook_schema().
 *
 * function ecv_schema() {}
 */

/**
 * Returns a structured array defining the fields created by this content type.
 *
 * This is packaged in a function so it can be used in both
 * ecv_install() and ecv_uninstall().
 */
function _uicustom_installed_fields() {
  $t = get_t();
  return array(
    'ecv_office' => array(
      'field_name' => 'ecv_office',
      'cardinality' => 1,
      'type'        => 'text',
      'settings'    => array(
        'max_length' => 60,
      ),
    ),
    'ecv_email' => array(
      'field_name'  => 'ecv_email',
      'cardinality' => 1,
      'type'        => 'text',
    ),     
    'ecv_education' => array(
      'field_name'  => 'ecv_education',
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'type'        => 'text',
    ),    
    'ecv_awards' => array(
      'field_name'  => 'ecv_awards',
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'type'        => 'text',
    ),     
    'ecv_research' => array(
      'field_name'  => 'ecv_research',
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'type'        => 'text',
    ),    
    'ecv_membership' => array(
      'field_name'  => 'ecv_membership',
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'type'        => 'text',
    ),     
    'ecv_experience' => array(
      'field_name'  => 'ecv_experience',
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'type'        => 'text',
    ),     
    'ecv_activities' => array(
      'field_name'  => 'ecv_activities',
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'type'        => 'text',
    ),    
    'ecv_user_phone' => array(
      'field_name'  => 'ecv_user_phone',
      'cardinality' => 1,
      'type'        => 'text',
    ),    
    'ecv_user_id' => array(
      'field_name'  => 'ecv_user_id',
      'cardinality' => 1,
      'type'        => 'text',
    ),
    'ecv_key' => array(
      'field_name'  => 'ecv_key',
      'cardinality' => 1,
      'type'        => 'text',
    ),
    'ecv_dept_name' => array(
      'field_name'  => 'ecv_dept_name',
      'cardinality' => 1,
      'type'        => 'text',
    ),    
    'ecv_division_name' => array(
      'field_name'  => 'ecv_division_name',
      'cardinality' => 1,
      'type'        => 'text',
    ),
    'ecv_image' => array(
      'field_name' => 'ecv_image',
      'type'       => 'image',
      'cardinality' => 1,
    ),
    'ecv_rank' => array(
      'field_name' => 'ecv_rank',
      'type' => 'taxonomy_term_reference',
      'cardinality' => 1,
      'settings' => array(
        'allowed_values' => array(
          array(
            'vocabulary' => 'job_rank',
            'parent' => 0,
          ),
        ),
      ),
    ),
  );
}

/**
 * Returns a structured array defining the instances for this content type.
 *
 * The instance lets Drupal know which widget to use to allow the user to enter
 * data and how to react in different view modes. 
 *
 * This is provided as a function so that it can be used in both hook_install()
 * and hook_uninstall().
 */
function _uicustom_installed_instances() {
  $t = get_t();
  return array(
    'ecv_office' => array(
      'field_name' => 'ecv_office',
      'label'       => $t('Office.'),
      'widget'      => array(
        'type'    => 'text_textfield',
      ),
    ),
    'ecv_email' => array(
      'field_name'  => 'ecv_email',
      'label' => $t('Email'),
      'type'        => 'text',
      'widget'      => array(
        'type'    => 'text_textfield',
      ),
      'display' => array(
        'teaser' => array(
          'label' => 'hidden',
          'type' => 'text',
        ),
      ),
    ),     
    'ecv_education' => array(
      'field_name'  => 'ecv_education',
      'label' => $t('Education'),
      'type'        => 'text',
      'widget'      => array(
        'type'    => 'text_textfield',
      ),
    ),     
    'ecv_awards' => array(
      'field_name'  => 'ecv_awards',
      'label' => $t('Honors and Awards'),
      'type'        => 'text',
      'widget'      => array(
        'type'    => 'text_textfield',
      ),
    ),     
    'ecv_research' => array(
      'field_name'  => 'ecv_research',
      'label' => $t('Scholarship/Research/Professional Productivity'),
      'type'        => 'text',
      'widget'      => array(
        'type'    => 'text_textfield',
      ),
    ),    
    'ecv_membership' => array(
      'field_name'  => 'ecv_membership',
      'label' => $t('Membership'),
      'type'        => 'text',
      'widget'      => array(
        'type'    => 'text_textfield',
      ),
    ),     
   'ecv_activities' => array(
      'field_name'  => 'ecv_activities',
      'label' => $t('Activities'),
      'type'        => 'text',
      'widget'      => array(
        'type'    => 'text_textfield',
      ),
    ),   
    'ecv_experience' => array(
      'field_name'  => 'ecv_experience',
      'label' => $t('Professional Experience'),
      'type'        => 'text',
      'widget'      => array(
        'type'    => 'text_textfield',
      ),
    ),     
    'ecv_user_phone' => array(
      'field_name'  => 'ecv_user_phone',
      'label' => $t('Phone'),
      'type'        => 'text',
      'widget'      => array(
        'type'    => 'text_textfield',
      ),
    ),    
    'ecv_user_id' => array(
      'field_name'  => 'ecv_user_id',
      'label' => $t('eCV user id'),
      'type'        => 'text',
      'widget'      => array(
        'type'    => 'text_textfield',
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'hidden',
        ),
      ),
    ),
    'ecv_key' => array(
      'field_name'  => 'ecv_key',
      'label' => $t('eCV key'),
      'type'        => 'text',
      'widget'      => array(
        'type'    => 'text_textfield',
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'hidden',
        ),
      ),
    ),
    'ecv_dept_name' => array(
      'field_name'  => 'ecv_dept_name',
      'label' => $t('Department'),
      'type'        => 'text',
      'widget'      => array(
        'type'    => 'text_textfield',
      ),
      'display' => array(
        'teaser' => array(
          'label' => 'hidden',
          'type' => 'text',
        ),
      ),
    ),    
    'ecv_division_name' => array(
      'field_name'  => 'ecv_division_name',
      'label' => $t('Division'),
      'type'        => 'text',
      'widget'      => array(
        'type'    => 'text_textfield',
      ),
    ),
    'ecv_image' => array(
      'field_name'  => 'ecv_image',
      'label'       => $t('Upload an image:'),
      'required'    => FALSE,
      'widget' => array(
        'type'    => 'image_image',
        'weight'  => 2.10,
      ),
    ),
      'ecv_rank' => array(
      'field_name' => 'ecv_rank',
      'label' => $t('Position'),
      'bundle' => 'ecv',
      'required' => FALSE,
      'widget' => array(
        'type' => 'options_select',
      ),
    ),
  );
}

/**
 * Implements hook_uninstall().
 */
function uicustom_uninstall() {
  // Gather all the example content that might have been created while this
  // module was enabled.  Simple selects still use db_query().
  // http://api.drupal.org/api/function/db_query/7
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => 'node_person'));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }

  // Delete all the nodes at once
  // http://api.drupal.org/api/function/node_delete_multiple/7
  node_delete_multiple($nids);

  // Loop over each of the fields defined by this module and delete
  // all instances of the field, their data, and the field itself.
  // http://api.drupal.org/api/function/field_delete_field/7
  foreach (array_keys(_uicustom_installed_fields()) as $field) {
    field_delete_field($field);
  }

  // Loop over any remaining field instances attached to the node_example
  // content type (such as the body field) and delete them individually.
  // http://api.drupal.org/api/function/field_delete_field/7
  $instances = field_info_instances('node', 'node_person');
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }

  // Delete our content type
  // http://api.drupal.org/api/function/node_type_delete/7
  node_type_delete('node_person');
  $vid = db_query("SELECT vid FROM {taxonomy_vocabulary} WHERE machine_name = 'job_rank'")->fetchField();
  taxonomy_vocabulary_delete($vid);
  // Purge all field infromation
  // http://api.drupal.org/api/function/field_purge_batch/7
  field_purge_batch(1000);
}